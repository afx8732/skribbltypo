/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl Typo API for resources, admin tools and authentification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmojiCandidateDto,
  EmojiDto,
} from '../models/index';
import {
    EmojiCandidateDtoFromJSON,
    EmojiCandidateDtoToJSON,
    EmojiDtoFromJSON,
    EmojiDtoToJSON,
} from '../models/index';

export interface AddEmojiRequest {
    emojiCandidateDto: EmojiCandidateDto;
}

export interface DeleteEmojiRequest {
    id: string;
    nameId?: number;
}

export interface GetAllEmojisRequest {
    limit: number;
    animated: boolean;
    statics: boolean;
    query?: string;
}

export interface GetAllEmojisCachedRequest {
    limit: number;
    animated: boolean;
    statics: boolean;
    query?: string;
}

export interface GetEmojiRequest {
    id: string;
    nameId?: number;
}

export interface GetNewEmojisRequest {
    limit: number;
    animated: boolean;
    statics: boolean;
    query?: string;
}

/**
 * 
 */
export class EmojisApi extends runtime.BaseAPI {

    /**
     *   Required Roles: Moderator | ContentModerator  Rate limit default: 30 Requests / 60000 ms TTL
     * Add a new emoji
     */
    async addEmojiRaw(requestParameters: AddEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmojiDto>> {
        if (requestParameters['emojiCandidateDto'] == null) {
            throw new runtime.RequiredError(
                'emojiCandidateDto',
                'Required parameter "emojiCandidateDto" was null or undefined when calling addEmoji().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/emojis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmojiCandidateDtoToJSON(requestParameters['emojiCandidateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmojiDtoFromJSON(jsonValue));
    }

    /**
     *   Required Roles: Moderator | ContentModerator  Rate limit default: 30 Requests / 60000 ms TTL
     * Add a new emoji
     */
    async addEmoji(requestParameters: AddEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmojiDto> {
        const response = await this.addEmojiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Roles: Moderator | ContentModerator  Rate limit default: 10 Requests / 60000 ms TTL
     * Delete a saved emoji  by name (id) and nameId
     */
    async deleteEmojiRaw(requestParameters: DeleteEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteEmoji().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nameId'] != null) {
            queryParameters['nameId'] = requestParameters['nameId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/emojis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *   Required Roles: Moderator | ContentModerator  Rate limit default: 10 Requests / 60000 ms TTL
     * Delete a saved emoji  by name (id) and nameId
     */
    async deleteEmoji(requestParameters: DeleteEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEmojiRaw(requestParameters, initOverrides);
    }

    /**
     *   Required Roles: None  Rate limit default: 30 Requests / 60000 ms TTL
     * Search all emojis
     */
    async getAllEmojisRaw(requestParameters: GetAllEmojisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmojiDto>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getAllEmojis().'
            );
        }

        if (requestParameters['animated'] == null) {
            throw new runtime.RequiredError(
                'animated',
                'Required parameter "animated" was null or undefined when calling getAllEmojis().'
            );
        }

        if (requestParameters['statics'] == null) {
            throw new runtime.RequiredError(
                'statics',
                'Required parameter "statics" was null or undefined when calling getAllEmojis().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['animated'] != null) {
            queryParameters['animated'] = requestParameters['animated'];
        }

        if (requestParameters['statics'] != null) {
            queryParameters['statics'] = requestParameters['statics'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/emojis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmojiDtoFromJSON));
    }

    /**
     *   Required Roles: None  Rate limit default: 30 Requests / 60000 ms TTL
     * Search all emojis
     */
    async getAllEmojis(requestParameters: GetAllEmojisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmojiDto>> {
        const response = await this.getAllEmojisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Roles: None  Rate limit default: 30 Requests / 60000 ms TTL
     * Search all emojis with cache enabled
     */
    async getAllEmojisCachedRaw(requestParameters: GetAllEmojisCachedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmojiDto>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getAllEmojisCached().'
            );
        }

        if (requestParameters['animated'] == null) {
            throw new runtime.RequiredError(
                'animated',
                'Required parameter "animated" was null or undefined when calling getAllEmojisCached().'
            );
        }

        if (requestParameters['statics'] == null) {
            throw new runtime.RequiredError(
                'statics',
                'Required parameter "statics" was null or undefined when calling getAllEmojisCached().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['animated'] != null) {
            queryParameters['animated'] = requestParameters['animated'];
        }

        if (requestParameters['statics'] != null) {
            queryParameters['statics'] = requestParameters['statics'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/emojis/cache`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmojiDtoFromJSON));
    }

    /**
     *   Required Roles: None  Rate limit default: 30 Requests / 60000 ms TTL
     * Search all emojis with cache enabled
     */
    async getAllEmojisCached(requestParameters: GetAllEmojisCachedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmojiDto>> {
        const response = await this.getAllEmojisCachedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Roles: None  Rate limit default: 10 Requests / 60000 ms TTL
     * Get a single saved emoji by name (id) and nameId
     */
    async getEmojiRaw(requestParameters: GetEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmojiDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEmoji().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nameId'] != null) {
            queryParameters['nameId'] = requestParameters['nameId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/emojis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmojiDtoFromJSON(jsonValue));
    }

    /**
     *   Required Roles: None  Rate limit default: 10 Requests / 60000 ms TTL
     * Get a single saved emoji by name (id) and nameId
     */
    async getEmoji(requestParameters: GetEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmojiDto> {
        const response = await this.getEmojiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Roles: Moderator | ContentModerator  Rate limit default: 30 Requests / 60000 ms TTL
     * Search for new emojis that are not yet in the database
     */
    async getNewEmojisRaw(requestParameters: GetNewEmojisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmojiDto>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getNewEmojis().'
            );
        }

        if (requestParameters['animated'] == null) {
            throw new runtime.RequiredError(
                'animated',
                'Required parameter "animated" was null or undefined when calling getNewEmojis().'
            );
        }

        if (requestParameters['statics'] == null) {
            throw new runtime.RequiredError(
                'statics',
                'Required parameter "statics" was null or undefined when calling getNewEmojis().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['animated'] != null) {
            queryParameters['animated'] = requestParameters['animated'];
        }

        if (requestParameters['statics'] != null) {
            queryParameters['statics'] = requestParameters['statics'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/emojis/discover`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmojiDtoFromJSON));
    }

    /**
     *   Required Roles: Moderator | ContentModerator  Rate limit default: 30 Requests / 60000 ms TTL
     * Search for new emojis that are not yet in the database
     */
    async getNewEmojis(requestParameters: GetNewEmojisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmojiDto>> {
        const response = await this.getNewEmojisRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
