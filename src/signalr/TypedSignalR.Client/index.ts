/* THIS (.ts) FILE IS GENERATED BY TypedSignalR.Client.TypeScript */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type { HubConnection, IStreamResult, Subject } from '@microsoft/signalr';
import type { IGuildLobbiesHub, ILobbyHub, IGuildLobbiesReceiver, ILobbyReceiver } from './tobeh.Avallone.Server.Hubs.Interfaces';
import type { GuildLobbiesUpdatedDto, LobbyDiscoveredDto, TypoLobbyStateDto, SkribblLobbyStateDto, SkribblLobbyTypoSettingsUpdateDto, TypoLobbySettingsDto } from '../tobeh.Avallone.Server.Classes.Dto';


// components

export type Disposable = {
    dispose(): void;
}

export type HubProxyFactory<T> = {
    createHubProxy(connection: HubConnection): T;
}

export type ReceiverRegister<T> = {
    register(connection: HubConnection, receiver: T): Disposable;
}

type ReceiverMethod = {
    methodName: string,
    method: (...args: any[]) => void
}

class ReceiverMethodSubscription implements Disposable {

    public constructor(
        private connection: HubConnection,
        private receiverMethod: ReceiverMethod[]) {
    }

    public readonly dispose = () => {
        for (const it of this.receiverMethod) {
            this.connection.off(it.methodName, it.method);
        }
    }
}

// API

export type HubProxyFactoryProvider = {
    (hubType: "IGuildLobbiesHub"): HubProxyFactory<IGuildLobbiesHub>;
    (hubType: "ILobbyHub"): HubProxyFactory<ILobbyHub>;
}

export const getHubProxyFactory = ((hubType: string) => {
    if(hubType === "IGuildLobbiesHub") {
        return IGuildLobbiesHub_HubProxyFactory.Instance;
    }
    if(hubType === "ILobbyHub") {
        return ILobbyHub_HubProxyFactory.Instance;
    }
}) as HubProxyFactoryProvider;

export type ReceiverRegisterProvider = {
    (receiverType: "IGuildLobbiesReceiver"): ReceiverRegister<IGuildLobbiesReceiver>;
    (receiverType: "ILobbyReceiver"): ReceiverRegister<ILobbyReceiver>;
}

export const getReceiverRegister = ((receiverType: string) => {
    if(receiverType === "IGuildLobbiesReceiver") {
        return IGuildLobbiesReceiver_Binder.Instance;
    }
    if(receiverType === "ILobbyReceiver") {
        return ILobbyReceiver_Binder.Instance;
    }
}) as ReceiverRegisterProvider;

// HubProxy

class IGuildLobbiesHub_HubProxyFactory implements HubProxyFactory<IGuildLobbiesHub> {
    public static Instance = new IGuildLobbiesHub_HubProxyFactory();

    private constructor() {
    }

    public readonly createHubProxy = (connection: HubConnection): IGuildLobbiesHub => {
        return new IGuildLobbiesHub_HubProxy(connection);
    }
}

class IGuildLobbiesHub_HubProxy implements IGuildLobbiesHub {

    public constructor(private connection: HubConnection) {
    }

    public readonly subscribeGuildLobbies = async (guildId: string): Promise<GuildLobbiesUpdatedDto> => {
        return await this.connection.invoke("SubscribeGuildLobbies", guildId);
    }
}

class ILobbyHub_HubProxyFactory implements HubProxyFactory<ILobbyHub> {
    public static Instance = new ILobbyHub_HubProxyFactory();

    private constructor() {
    }

    public readonly createHubProxy = (connection: HubConnection): ILobbyHub => {
        return new ILobbyHub_HubProxy(connection);
    }
}

class ILobbyHub_HubProxy implements ILobbyHub {

    public constructor(private connection: HubConnection) {
    }

    public readonly lobbyDiscovered = async (lobbyDiscovery: LobbyDiscoveredDto): Promise<TypoLobbyStateDto> => {
        return await this.connection.invoke("LobbyDiscovered", lobbyDiscovery);
    }

    public readonly claimLobbyOwnership = async (): Promise<void> => {
        return await this.connection.invoke("ClaimLobbyOwnership");
    }

    public readonly updateSkribblLobbyState = async (state: SkribblLobbyStateDto): Promise<void> => {
        return await this.connection.invoke("UpdateSkribblLobbyState", state);
    }

    public readonly updateTypoLobbySettings = async (typoSettings: SkribblLobbyTypoSettingsUpdateDto): Promise<void> => {
        return await this.connection.invoke("UpdateTypoLobbySettings", typoSettings);
    }
}


// Receiver

class IGuildLobbiesReceiver_Binder implements ReceiverRegister<IGuildLobbiesReceiver> {

    public static Instance = new IGuildLobbiesReceiver_Binder();

    private constructor() {
    }

    public readonly register = (connection: HubConnection, receiver: IGuildLobbiesReceiver): Disposable => {

        const __guildLobbiesUpdated = (...args: [GuildLobbiesUpdatedDto]) => receiver.guildLobbiesUpdated(...args);

        connection.on("GuildLobbiesUpdated", __guildLobbiesUpdated);

        const methodList: ReceiverMethod[] = [
            { methodName: "GuildLobbiesUpdated", method: __guildLobbiesUpdated }
        ]

        return new ReceiverMethodSubscription(connection, methodList);
    }
}

class ILobbyReceiver_Binder implements ReceiverRegister<ILobbyReceiver> {

    public static Instance = new ILobbyReceiver_Binder();

    private constructor() {
    }

    public readonly register = (connection: HubConnection, receiver: ILobbyReceiver): Disposable => {

        const __typoLobbySettingsUpdated = (...args: [TypoLobbySettingsDto]) => receiver.typoLobbySettingsUpdated(...args);
        const __lobbyOwnershipResigned = () => receiver.lobbyOwnershipResigned();

        connection.on("TypoLobbySettingsUpdated", __typoLobbySettingsUpdated);
        connection.on("LobbyOwnershipResigned", __lobbyOwnershipResigned);

        const methodList: ReceiverMethod[] = [
            { methodName: "TypoLobbySettingsUpdated", method: __typoLobbySettingsUpdated },
            { methodName: "LobbyOwnershipResigned", method: __lobbyOwnershipResigned }
        ]

        return new ReceiverMethodSubscription(connection, methodList);
    }
}

